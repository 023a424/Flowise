{
    "description": "Patient concierge system that always verify the user's identity first before proceeding to answer user questions",
    "nodes": [
        {
            "id": "seqStart_0",
            "position": {
                "x": -3.0044454531555687,
                "y": 131.32550315179122
            },
            "type": "customNode",
            "data": {
                "id": "seqStart_0",
                "label": "Start",
                "version": 1,
                "name": "seqStart",
                "type": "START",
                "baseClasses": ["START"],
                "category": "Sequential Agents",
                "description": "Starting point of the conversation",
                "inputParams": [],
                "inputAnchors": [
                    {
                        "label": "Chat Model",
                        "name": "model",
                        "type": "BaseChatModel",
                        "description": "Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat",
                        "id": "seqStart_0-input-model-BaseChatModel"
                    },
                    {
                        "label": "Agent Memory",
                        "name": "agentMemory",
                        "type": "BaseCheckpointSaver",
                        "description": "Save the state of the agent",
                        "optional": true,
                        "id": "seqStart_0-input-agentMemory-BaseCheckpointSaver"
                    },
                    {
                        "label": "State",
                        "name": "state",
                        "type": "State",
                        "description": "State is an object that is updated by nodes in the graph, passing from one node to another. Agent Memory must be connected when using State. By default, state contains \"messages\" that got updated with each message sent and received.",
                        "optional": true,
                        "id": "seqStart_0-input-state-State"
                    },
                    {
                        "label": "Input Moderation",
                        "description": "Detect text that could generate harmful output and prevent it from being sent to the language model",
                        "name": "inputModeration",
                        "type": "Moderation",
                        "optional": true,
                        "list": true,
                        "id": "seqStart_0-input-inputModeration-Moderation"
                    }
                ],
                "inputs": {
                    "model": "{{chatOpenAI_0.data.instance}}",
                    "agentMemory": "{{agentMemory_0.data.instance}}",
                    "state": "{{seqState_0.data.instance}}",
                    "inputModeration": ""
                },
                "outputAnchors": [
                    {
                        "id": "seqStart_0-output-seqStart-START",
                        "name": "seqStart",
                        "label": "START",
                        "description": "Starting point of the conversation",
                        "type": "START"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "width": 300,
            "height": 382,
            "selected": false,
            "positionAbsolute": {
                "x": -3.0044454531555687,
                "y": 131.32550315179122
            },
            "dragging": false
        },
        {
            "id": "seqAgent_0",
            "position": {
                "x": 920.2928890412798,
                "y": 439.9796446477817
            },
            "type": "customNode",
            "data": {
                "id": "seqAgent_0",
                "label": "Agent",
                "version": 1,
                "name": "seqAgent",
                "type": "Agent",
                "baseClasses": ["Agent"],
                "category": "Sequential Agents",
                "inputParams": [
                    {
                        "label": "Agent Name",
                        "name": "agentName",
                        "type": "string",
                        "placeholder": "Agent",
                        "id": "seqAgent_0-input-agentName-string"
                    },
                    {
                        "label": "System Prompt",
                        "name": "agentPrompt",
                        "type": "string",
                        "rows": 4,
                        "default": "You are a research assistant who can search for up-to-date info using search engine.",
                        "id": "seqAgent_0-input-agentPrompt-string"
                    },
                    {
                        "label": "Format Prompt Values",
                        "name": "promptValues",
                        "type": "json",
                        "description": "Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value",
                        "optional": true,
                        "acceptVariable": true,
                        "list": true,
                        "id": "seqAgent_0-input-promptValues-json"
                    },
                    {
                        "label": "Update State",
                        "name": "updateStateMemory",
                        "type": "datagrid",
                        "hint": {
                            "label": "How to use",
                            "value": "\n1. Fill in the key and value pair to be updated. Key must exists in the State schema\n\n2. Agent's output is available as `$flow.output` with the following structure:\n    ```json\n    {\n        \"output\": \"Hello! How can I assist you today?\",\n        \"usedTools\": [\n            {\n                \"tool\": \"tool-name\",\n                \"toolInput\": \"{foo: var}\",\n                \"toolOutput\": \"This is the tool's output\"\n            }\n        ],\n        \"sourceDocuments\": [\n            {\n                \"pageContent\": \"This is the page content\",\n                \"metadata\": \"{foo: var}\",\n            }\n        ],\n    }\n    ```\n\n3. You can get default flow config:\n    - `$flow.sessionId`\n    - `$flow.chatId`\n    - `$flow.chatflowId`\n    - `$flow.input`\n    - `$flow.state`\n\n4. You can get custom variables: `$vars.<variable-name>`\n\n"
                        },
                        "description": "This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values",
                        "datagrid": [
                            {
                                "field": "key",
                                "headerName": "Key",
                                "editable": true
                            },
                            {
                                "field": "value",
                                "headerName": "Value",
                                "editable": true,
                                "flex": 1
                            }
                        ],
                        "optional": true,
                        "additionalParams": true,
                        "id": "seqAgent_0-input-updateStateMemory-datagrid"
                    },
                    {
                        "label": "Update State (Code)",
                        "name": "updateStateMemoryCode",
                        "type": "code",
                        "hint": {
                            "label": "How to use",
                            "value": "\n1. Must return an object. Object must contains at least one key that matches State's schema\n\n2. Agent's output is available as `$flow.output` with the following structure:\n    ```json\n    {\n        \"output\": \"Hello! How can I assist you today?\",\n        \"usedTools\": [\n            {\n                \"tool\": \"tool-name\",\n                \"toolInput\": \"{foo: var}\",\n                \"toolOutput\": \"This is the tool's output\"\n            }\n        ],\n        \"sourceDocuments\": [\n            {\n                \"pageContent\": \"This is the page content\",\n                \"metadata\": \"{foo: var}\",\n            }\n        ],\n    }\n    ```\n\n3. You can get default flow config:\n    - `$flow.sessionId`\n    - `$flow.chatId`\n    - `$flow.chatflowId`\n    - `$flow.input`\n    - `$flow.state`\n\n4. You can get custom variables: `$vars.<variable-name>`\n\n"
                        },
                        "description": "This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. This will be used when both \"Update State\" and \"Update State (Code)\" are provided. Must return an object representing the state",
                        "hideCodeExecute": true,
                        "codeExample": "const result = $flow.output;\n\n/* Suppose we have a custom State schema like this:\n* {\n    aggregate: {\n        value: (x, y) => x.concat(y),\n        default: () => []\n    }\n  }\n*/\n\nreturn {\n  aggregate: [result.output] //update state by returning an object with the same schema\n};",
                        "optional": true,
                        "additionalParams": true,
                        "id": "seqAgent_0-input-updateStateMemoryCode-code"
                    },
                    {
                        "label": "Max Iterations",
                        "name": "maxIterations",
                        "type": "number",
                        "optional": true,
                        "additionalParams": true,
                        "id": "seqAgent_0-input-maxIterations-number"
                    }
                ],
                "inputAnchors": [
                    {
                        "label": "Tools",
                        "name": "tools",
                        "type": "Tool",
                        "list": true,
                        "optional": true,
                        "id": "seqAgent_0-input-tools-Tool"
                    },
                    {
                        "label": "Agent/Start",
                        "name": "agentOrStart",
                        "type": "Agent | START",
                        "list": true,
                        "id": "seqAgent_0-input-agentOrStart-Agent | START"
                    },
                    {
                        "label": "Chat Model",
                        "name": "model",
                        "type": "BaseChatModel",
                        "optional": true,
                        "description": "Overwrite model to be used for this agent",
                        "id": "seqAgent_0-input-model-BaseChatModel"
                    }
                ],
                "inputs": {
                    "agentName": "Identity Verification",
                    "agentPrompt": "You are an Identity Verfication Specialist in the Patient Concierge system. You job is to verify the identity of the patient before any questions about their upcoming procedure can be addressed.\n\nBegin by greeting the patient and informing them that they need to verify their identity before proceeding. If verification is successful, allow the patient to ask questions about their procedure. If verification fails, kindly inform the patient and offer assistance for re-verification. Make sure both the patient name and date of birth matches records in the patient identity database before proceeding (\"patient_name\", \"date_of_birth\")\n\nSteps:\n1. Greet the patient.\n2. Inform them about the need for identity verification.\n3. Request the patient's full name and date of birth.\n4. Verify the information against the records.\n5. If verification is successful, handle any questions about the upcoming procedure.\n6. If verification fails, provide appropriate instructions or assistance.\n\nExample Interaction:\n1. “To verify your identity, please provide your full name and date of birth.”\n2. If verification is successful:\n    - “Thank you for verifying your identity. How can I assist you with your upcoming procedure?”\n3. If verification fails:\n    - “I’m sorry, but your identity could not be verified. Please try again or contact support for assistance.”\n\nUse the function tool \"patient_identity_database\" to verify identity. User might give date of birth in different format, be smart and convert it into MM-DD-YYYY format. When verifying identity, if the information does not match, reply with \"Sorry your information is not in our database.\"",
                    "tools": ["{{customTool_1.data.instance}}"],
                    "agentOrStart": ["{{seqCondition_0.data.instance}}"],
                    "model": "",
                    "promptValues": "",
                    "updateStateMemory": "[]",
                    "updateStateMemoryCode": "const result = $flow.output;\nconst usedTools = result.usedTools ?? [];\n\n// Check if correct tool is being used\nconst calledTool =  usedTools.find((usedTool) => usedTool.tool === \"patient_identity_database\");\nif (!calledTool) return {};\n\n\ntry {\n  const parsedToolOutput = JSON.parse(calledTool.toolOutput);\n  return {\n    userInfo: parsedToolOutput // parsing tool output since its always string\n  };\n} catch (e) {\n  return {};\n}\n",
                    "maxIterations": ""
                },
                "outputAnchors": [
                    {
                        "id": "seqAgent_0-output-seqAgent-Agent",
                        "name": "seqAgent",
                        "label": "Agent",
                        "description": "",
                        "type": "Agent"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "width": 300,
            "height": 762,
            "selected": false,
            "positionAbsolute": {
                "x": 920.2928890412798,
                "y": 439.9796446477817
            },
            "dragging": false
        },
        {
            "id": "seqAgent_1",
            "position": {
                "x": 922.3037369205383,
                "y": -396.0686559355384
            },
            "type": "customNode",
            "data": {
                "id": "seqAgent_1",
                "label": "Agent",
                "version": 1,
                "name": "seqAgent",
                "type": "Agent",
                "baseClasses": ["Agent"],
                "category": "Sequential Agents",
                "inputParams": [
                    {
                        "label": "Agent Name",
                        "name": "agentName",
                        "type": "string",
                        "placeholder": "Agent",
                        "id": "seqAgent_1-input-agentName-string"
                    },
                    {
                        "label": "System Prompt",
                        "name": "agentPrompt",
                        "type": "string",
                        "rows": 4,
                        "default": "You are a research assistant who can search for up-to-date info using search engine.",
                        "id": "seqAgent_1-input-agentPrompt-string"
                    },
                    {
                        "label": "Format Prompt Values",
                        "name": "promptValues",
                        "type": "json",
                        "description": "Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value",
                        "optional": true,
                        "acceptVariable": true,
                        "list": true,
                        "id": "seqAgent_1-input-promptValues-json"
                    },
                    {
                        "label": "Update State",
                        "name": "updateStateMemory",
                        "type": "datagrid",
                        "hint": {
                            "label": "How to use",
                            "value": "\n1. Fill in the key and value pair to be updated. Key must exists in the State schema\n\n2. Agent's output is available as `$flow.output` with the following structure:\n    ```json\n    {\n        \"output\": \"Hello! How can I assist you today?\",\n        \"usedTools\": [\n            {\n                \"tool\": \"tool-name\",\n                \"toolInput\": \"{foo: var}\",\n                \"toolOutput\": \"This is the tool's output\"\n            }\n        ],\n        \"sourceDocuments\": [\n            {\n                \"pageContent\": \"This is the page content\",\n                \"metadata\": \"{foo: var}\",\n            }\n        ],\n    }\n    ```\n\n3. You can get default flow config:\n    - `$flow.sessionId`\n    - `$flow.chatId`\n    - `$flow.chatflowId`\n    - `$flow.input`\n    - `$flow.state`\n\n4. You can get custom variables: `$vars.<variable-name>`\n\n"
                        },
                        "description": "This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values",
                        "datagrid": [
                            {
                                "field": "key",
                                "headerName": "Key",
                                "editable": true
                            },
                            {
                                "field": "value",
                                "headerName": "Value",
                                "editable": true,
                                "flex": 1
                            }
                        ],
                        "optional": true,
                        "additionalParams": true,
                        "id": "seqAgent_1-input-updateStateMemory-datagrid"
                    },
                    {
                        "label": "Update State (Code)",
                        "name": "updateStateMemoryCode",
                        "type": "code",
                        "hint": {
                            "label": "How to use",
                            "value": "\n1. Must return an object. Object must contains at least one key that matches State's schema\n\n2. Agent's output is available as `$flow.output` with the following structure:\n    ```json\n    {\n        \"output\": \"Hello! How can I assist you today?\",\n        \"usedTools\": [\n            {\n                \"tool\": \"tool-name\",\n                \"toolInput\": \"{foo: var}\",\n                \"toolOutput\": \"This is the tool's output\"\n            }\n        ],\n        \"sourceDocuments\": [\n            {\n                \"pageContent\": \"This is the page content\",\n                \"metadata\": \"{foo: var}\",\n            }\n        ],\n    }\n    ```\n\n3. You can get default flow config:\n    - `$flow.sessionId`\n    - `$flow.chatId`\n    - `$flow.chatflowId`\n    - `$flow.input`\n    - `$flow.state`\n\n4. You can get custom variables: `$vars.<variable-name>`\n\n"
                        },
                        "description": "This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. This will be used when both \"Update State\" and \"Update State (Code)\" are provided. Must return an object representing the state",
                        "hideCodeExecute": true,
                        "codeExample": "const result = $flow.output;\n\n/* Suppose we have a custom State schema like this:\n* {\n    aggregate: {\n        value: (x, y) => x.concat(y),\n        default: () => []\n    }\n  }\n*/\n\nreturn {\n  aggregate: [result.output] //update state by returning an object with the same schema\n};",
                        "optional": true,
                        "additionalParams": true,
                        "id": "seqAgent_1-input-updateStateMemoryCode-code"
                    },
                    {
                        "label": "Max Iterations",
                        "name": "maxIterations",
                        "type": "number",
                        "optional": true,
                        "additionalParams": true,
                        "id": "seqAgent_1-input-maxIterations-number"
                    }
                ],
                "inputAnchors": [
                    {
                        "label": "Tools",
                        "name": "tools",
                        "type": "Tool",
                        "list": true,
                        "optional": true,
                        "id": "seqAgent_1-input-tools-Tool"
                    },
                    {
                        "label": "Agent/Start",
                        "name": "agentOrStart",
                        "type": "Agent | START",
                        "list": true,
                        "id": "seqAgent_1-input-agentOrStart-Agent | START"
                    },
                    {
                        "label": "Chat Model",
                        "name": "model",
                        "type": "BaseChatModel",
                        "optional": true,
                        "description": "Overwrite model to be used for this agent",
                        "id": "seqAgent_1-input-model-BaseChatModel"
                    }
                ],
                "inputs": {
                    "agentName": "Concierge",
                    "agentPrompt": "You are the Assistant in our Patient Concierge system. The patient has verified their identity and is now allowed access to only their information. \n\nUse the function tool \"patient_information_database\" to look up patient procedures that match the Patient's name and ID with \"patient_name\" and \"user_id\" in that database. \n\nDo not make up information if it is not represented in the function tool database calls. Use this date format when to referring to dates in the databases: MM-DD-YYYY\n\nDO NOT ALLOW PATIENTS TO PROCEDE TO ACCESS OTHER PATIENT INFORMATION OR IT MAY RESULT IN A PHI VIOLATION.",
                    "tools": ["{{customTool_0.data.instance}}"],
                    "agentOrStart": ["{{seqCondition_0.data.instance}}"],
                    "model": "",
                    "promptValues": "",
                    "updateStateMemory": "",
                    "updateStateMemoryCode": "",
                    "maxIterations": ""
                },
                "outputAnchors": [
                    {
                        "id": "seqAgent_1-output-seqAgent-Agent",
                        "name": "seqAgent",
                        "label": "Agent",
                        "description": "",
                        "type": "Agent"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "width": 300,
            "height": 762,
            "selected": false,
            "positionAbsolute": {
                "x": 922.3037369205383,
                "y": -396.0686559355384
            },
            "dragging": false
        },
        {
            "id": "seqEnd_0",
            "position": {
                "x": 1329.9486734215511,
                "y": 201.79186039463212
            },
            "type": "customNode",
            "data": {
                "id": "seqEnd_0",
                "label": "End",
                "version": 1,
                "name": "seqEnd",
                "type": "END",
                "baseClasses": ["END"],
                "category": "Sequential Agents",
                "description": "End conversation",
                "inputParams": [],
                "inputAnchors": [
                    {
                        "label": "Agent/End",
                        "name": "agentOrEnd",
                        "type": "Agent | END",
                        "id": "seqEnd_0-input-agentOrEnd-Agent | END"
                    }
                ],
                "inputs": {
                    "agentOrEnd": "{{seqAgent_1.data.instance}}"
                },
                "outputAnchors": [],
                "outputs": {},
                "selected": false
            },
            "width": 300,
            "height": 143,
            "positionAbsolute": {
                "x": 1329.9486734215511,
                "y": 201.79186039463212
            },
            "selected": false,
            "dragging": false
        },
        {
            "id": "seqState_0",
            "position": {
                "x": -519.9916644965176,
                "y": 470.210716636008
            },
            "type": "customNode",
            "data": {
                "id": "seqState_0",
                "label": "State",
                "version": 1,
                "name": "seqState",
                "type": "State",
                "baseClasses": ["State"],
                "category": "Sequential Agents",
                "description": "A centralized state object, updated by nodes in the graph, passing from one node to another",
                "inputParams": [
                    {
                        "label": "State",
                        "name": "stateMemory",
                        "type": "datagrid",
                        "description": "Structure for state. By default, state contains \"messages\" that got updated with each message sent and received.",
                        "hint": {
                            "label": "How to use",
                            "value": "\nSpecify the Key, Operation Type, and Default Value for the state object. The Operation Type can be either \"Replace\" or \"Append\".\n\n**Replace**\n- Replace the existing value with the new value.\n- If the new value is null, the existing value will be retained.\n\n**Append**\n- Append the new value to the existing value.\n- Default value can be empty or an array. Ex: [\"a\", \"b\"]\n- Final value is an array.\n"
                        },
                        "datagrid": [
                            {
                                "field": "key",
                                "headerName": "Key",
                                "editable": true
                            },
                            {
                                "field": "type",
                                "headerName": "Operation",
                                "type": "singleSelect",
                                "valueOptions": ["Replace", "Append"],
                                "editable": true
                            },
                            {
                                "field": "defaultValue",
                                "headerName": "Default Value",
                                "flex": 1,
                                "editable": true
                            }
                        ],
                        "optional": true,
                        "additionalParams": true,
                        "id": "seqState_0-input-stateMemory-datagrid"
                    },
                    {
                        "label": "State (Code)",
                        "name": "stateMemoryCode",
                        "type": "code",
                        "description": "JSON object representing the state. This will be used when both \"State\" and \"State (Code)\" are provided.",
                        "hideCodeExecute": true,
                        "codeExample": "{\n    aggregate: {\n        value: (x, y) => x.concat(y), // here we append the new message to the existing messages\n        default: () => []\n    }\n}",
                        "optional": true,
                        "additionalParams": true,
                        "id": "seqState_0-input-stateMemoryCode-code"
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "stateMemory": "[{\"key\":\"userInfo\",\"type\":\"Replace\",\"defaultValue\":\"\",\"actions\":\"\",\"id\":1}]",
                    "stateMemoryCode": ""
                },
                "outputAnchors": [
                    {
                        "id": "seqState_0-output-seqState-State",
                        "name": "seqState",
                        "label": "State",
                        "description": "A centralized state object, updated by nodes in the graph, passing from one node to another",
                        "type": "State"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "width": 300,
            "height": 251,
            "selected": false,
            "positionAbsolute": {
                "x": -519.9916644965176,
                "y": 470.210716636008
            },
            "dragging": false
        },
        {
            "id": "agentMemory_0",
            "position": {
                "x": -864.0130374378696,
                "y": 149.18256607512723
            },
            "type": "customNode",
            "data": {
                "id": "agentMemory_0",
                "label": "Agent Memory",
                "version": 1,
                "name": "agentMemory",
                "type": "AgentMemory",
                "baseClasses": ["AgentMemory", "BaseCheckpointSaver"],
                "category": "Memory",
                "description": "Memory for agentflow to remember the state of the conversation",
                "inputParams": [
                    {
                        "label": "Database",
                        "name": "databaseType",
                        "type": "options",
                        "options": [
                            {
                                "label": "SQLite",
                                "name": "sqlite"
                            }
                        ],
                        "default": "sqlite",
                        "id": "agentMemory_0-input-databaseType-options"
                    },
                    {
                        "label": "Database File Path",
                        "name": "databaseFilePath",
                        "type": "string",
                        "placeholder": "C:\\Users\\User\\.flowise\\database.sqlite",
                        "description": "If SQLite is selected, provide the path to the SQLite database file. Leave empty to use default application database",
                        "additionalParams": true,
                        "optional": true,
                        "id": "agentMemory_0-input-databaseFilePath-string"
                    },
                    {
                        "label": "Additional Connection Configuration",
                        "name": "additionalConfig",
                        "type": "json",
                        "additionalParams": true,
                        "optional": true,
                        "id": "agentMemory_0-input-additionalConfig-json"
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "databaseType": "sqlite",
                    "databaseFilePath": "",
                    "additionalConfig": ""
                },
                "outputAnchors": [
                    {
                        "id": "agentMemory_0-output-agentMemory-AgentMemory|BaseCheckpointSaver",
                        "name": "agentMemory",
                        "label": "AgentMemory",
                        "description": "Memory for agentflow to remember the state of the conversation",
                        "type": "AgentMemory | BaseCheckpointSaver"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "width": 300,
            "height": 327,
            "selected": false,
            "positionAbsolute": {
                "x": -864.0130374378696,
                "y": 149.18256607512723
            },
            "dragging": false
        },
        {
            "id": "chatOpenAI_0",
            "position": {
                "x": -508.58279243468706,
                "y": -376.093562206961
            },
            "type": "customNode",
            "data": {
                "id": "chatOpenAI_0",
                "label": "ChatOpenAI",
                "version": 6,
                "name": "chatOpenAI",
                "type": "ChatOpenAI",
                "baseClasses": ["ChatOpenAI", "BaseChatModel", "BaseLanguageModel", "Runnable"],
                "category": "Chat Models",
                "description": "Wrapper around OpenAI large language models that use the Chat endpoint",
                "inputParams": [
                    {
                        "label": "Connect Credential",
                        "name": "credential",
                        "type": "credential",
                        "credentialNames": ["openAIApi"],
                        "id": "chatOpenAI_0-input-credential-credential"
                    },
                    {
                        "label": "Model Name",
                        "name": "modelName",
                        "type": "asyncOptions",
                        "loadMethod": "listModels",
                        "default": "gpt-3.5-turbo",
                        "id": "chatOpenAI_0-input-modelName-asyncOptions"
                    },
                    {
                        "label": "Temperature",
                        "name": "temperature",
                        "type": "number",
                        "step": 0.1,
                        "default": 0.9,
                        "optional": true,
                        "id": "chatOpenAI_0-input-temperature-number"
                    },
                    {
                        "label": "Max Tokens",
                        "name": "maxTokens",
                        "type": "number",
                        "step": 1,
                        "optional": true,
                        "additionalParams": true,
                        "id": "chatOpenAI_0-input-maxTokens-number"
                    },
                    {
                        "label": "Top Probability",
                        "name": "topP",
                        "type": "number",
                        "step": 0.1,
                        "optional": true,
                        "additionalParams": true,
                        "id": "chatOpenAI_0-input-topP-number"
                    },
                    {
                        "label": "Frequency Penalty",
                        "name": "frequencyPenalty",
                        "type": "number",
                        "step": 0.1,
                        "optional": true,
                        "additionalParams": true,
                        "id": "chatOpenAI_0-input-frequencyPenalty-number"
                    },
                    {
                        "label": "Presence Penalty",
                        "name": "presencePenalty",
                        "type": "number",
                        "step": 0.1,
                        "optional": true,
                        "additionalParams": true,
                        "id": "chatOpenAI_0-input-presencePenalty-number"
                    },
                    {
                        "label": "Timeout",
                        "name": "timeout",
                        "type": "number",
                        "step": 1,
                        "optional": true,
                        "additionalParams": true,
                        "id": "chatOpenAI_0-input-timeout-number"
                    },
                    {
                        "label": "BasePath",
                        "name": "basepath",
                        "type": "string",
                        "optional": true,
                        "additionalParams": true,
                        "id": "chatOpenAI_0-input-basepath-string"
                    },
                    {
                        "label": "BaseOptions",
                        "name": "baseOptions",
                        "type": "json",
                        "optional": true,
                        "additionalParams": true,
                        "id": "chatOpenAI_0-input-baseOptions-json"
                    },
                    {
                        "label": "Allow Image Uploads",
                        "name": "allowImageUploads",
                        "type": "boolean",
                        "description": "Automatically uses gpt-4-vision-preview when image is being uploaded from chat. Only works with LLMChain, Conversation Chain, ReAct Agent, and Conversational Agent",
                        "default": false,
                        "optional": true,
                        "id": "chatOpenAI_0-input-allowImageUploads-boolean"
                    },
                    {
                        "label": "Image Resolution",
                        "description": "This parameter controls the resolution in which the model views the image.",
                        "name": "imageResolution",
                        "type": "options",
                        "options": [
                            {
                                "label": "Low",
                                "name": "low"
                            },
                            {
                                "label": "High",
                                "name": "high"
                            },
                            {
                                "label": "Auto",
                                "name": "auto"
                            }
                        ],
                        "default": "low",
                        "optional": false,
                        "additionalParams": true,
                        "id": "chatOpenAI_0-input-imageResolution-options"
                    }
                ],
                "inputAnchors": [
                    {
                        "label": "Cache",
                        "name": "cache",
                        "type": "BaseCache",
                        "optional": true,
                        "id": "chatOpenAI_0-input-cache-BaseCache"
                    }
                ],
                "inputs": {
                    "cache": "",
                    "modelName": "gpt-3.5-turbo",
                    "temperature": 0.9,
                    "maxTokens": "",
                    "topP": "",
                    "frequencyPenalty": "",
                    "presencePenalty": "",
                    "timeout": "",
                    "basepath": "",
                    "baseOptions": "",
                    "allowImageUploads": "",
                    "imageResolution": "low"
                },
                "outputAnchors": [
                    {
                        "id": "chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable",
                        "name": "chatOpenAI",
                        "label": "ChatOpenAI",
                        "description": "Wrapper around OpenAI large language models that use the Chat endpoint",
                        "type": "ChatOpenAI | BaseChatModel | BaseLanguageModel | Runnable"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "width": 300,
            "height": 669,
            "selected": false,
            "positionAbsolute": {
                "x": -508.58279243468706,
                "y": -376.093562206961
            },
            "dragging": false
        },
        {
            "id": "seqCondition_0",
            "position": {
                "x": 387.42639923153087,
                "y": 128.86853855383075
            },
            "type": "customNode",
            "data": {
                "id": "seqCondition_0",
                "label": "Condition",
                "version": 1,
                "name": "seqCondition",
                "type": "Condition",
                "baseClasses": ["Condition"],
                "category": "Sequential Agents",
                "description": "Conditional function to determine which route to take next",
                "inputParams": [
                    {
                        "label": "Condition Name",
                        "name": "conditionName",
                        "type": "string",
                        "optional": true,
                        "placeholder": "If X, then Y",
                        "id": "seqCondition_0-input-conditionName-string"
                    },
                    {
                        "label": "Condition Function",
                        "name": "conditionFunction",
                        "type": "conditionFunction",
                        "description": "Function to evaluate the condition",
                        "hint": {
                            "label": "How to use",
                            "value": "\n1. Must return a string value at the end of function:\n    - Any string value will be considered as the next Agent\n    - If you want to end the flow, return \"End\"\n\n2. You can get default flow config:\n    - `$flow.sessionId`\n    - `$flow.chatId`\n    - `$flow.chatflowId`\n    - `$flow.input`\n    - `$flow.state`\n\n3. You can get messages from the state: `$flow.state.messages`:\n    ```json\n    [\n        {\n            content: 'Hello! How can I assist you today?',\n            name: '',\n            additional_kwargs: {},\n            response_metadata: {},\n            tool_calls: [],\n            invalid_tool_calls: [],\n            usage_metadata: {}\n        }\n    ]\n    ```\n\n4. You can get custom variables: `$vars.<variable-name>`\n\n"
                        },
                        "hideCodeExecute": true,
                        "default": "\nconst state = $flow.state;\n                \nconst messages = state.messages;\n\nconst lastMessage = messages[messages.length - 1];\n\n/* Check if the last message has content */\nif (lastMessage.content) {\n    return \"Agent\";\n}\n\nreturn \"End\";",
                        "codeExample": "\nconst state = $flow.state;\n                \nconst messages = state.messages;\n\nconst lastMessage = messages[messages.length - 1];\n\n/* Check if the last message has content */\nif (lastMessage.content) {\n    return \"Agent\";\n}\n\nreturn \"End\";",
                        "id": "seqCondition_0-input-conditionFunction-conditionFunction"
                    }
                ],
                "inputAnchors": [
                    {
                        "label": "Agent/Start",
                        "name": "agentOrStart",
                        "type": "Agent | START",
                        "list": true,
                        "id": "seqCondition_0-input-agentOrStart-Agent | START"
                    }
                ],
                "inputs": {
                    "conditionName": "Get User Info",
                    "agentOrStart": ["{{seqStart_0.data.instance}}"],
                    "conditionFunction": "const state = $flow.state;\n                \nconst messages = state.messages;\nconst userInfo = state.userInfo;\n\nif (userInfo) {\n    return \"Concierge\";\n}\n\nreturn \"Identity\";"
                },
                "outputAnchors": [
                    {
                        "name": "output",
                        "label": "Output",
                        "type": "options",
                        "options": [
                            {
                                "id": "seqCondition_0-output-concierge-Agent",
                                "name": "concierge",
                                "label": "Concierge",
                                "type": "Agent",
                                "isAnchor": true
                            },
                            {
                                "id": "seqCondition_0-output-identity-Agent",
                                "name": "identity",
                                "label": "Identity",
                                "type": "Agent",
                                "isAnchor": true
                            }
                        ]
                    }
                ],
                "outputs": {
                    "output": "agent"
                },
                "selected": false
            },
            "width": 300,
            "height": 474,
            "selected": false,
            "positionAbsolute": {
                "x": 387.42639923153087,
                "y": 128.86853855383075
            },
            "dragging": false
        },
        {
            "id": "customTool_0",
            "position": {
                "x": 477.1431591063878,
                "y": -377.59229879166634
            },
            "type": "customNode",
            "data": {
                "id": "customTool_0",
                "label": "Custom Tool",
                "version": 1,
                "name": "customTool",
                "type": "CustomTool",
                "baseClasses": ["CustomTool", "Tool", "StructuredTool", "Runnable"],
                "category": "Tools",
                "description": "Use custom tool you've created in Flowise within chatflow",
                "inputParams": [
                    {
                        "label": "Select Tool",
                        "name": "selectedTool",
                        "type": "asyncOptions",
                        "loadMethod": "listTools",
                        "id": "customTool_0-input-selectedTool-asyncOptions"
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "selectedTool": "f0ea4e6b-d95d-4554-8270-d8e31b393243"
                },
                "outputAnchors": [
                    {
                        "id": "customTool_0-output-customTool-CustomTool|Tool|StructuredTool|Runnable",
                        "name": "customTool",
                        "label": "CustomTool",
                        "description": "Use custom tool you've created in Flowise within chatflow",
                        "type": "CustomTool | Tool | StructuredTool | Runnable"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "width": 300,
            "height": 285,
            "selected": false,
            "positionAbsolute": {
                "x": 477.1431591063878,
                "y": -377.59229879166634
            },
            "dragging": false
        },
        {
            "id": "customTool_1",
            "position": {
                "x": 486.94483167859744,
                "y": 752.4728141868017
            },
            "type": "customNode",
            "data": {
                "id": "customTool_1",
                "label": "Custom Tool",
                "version": 1,
                "name": "customTool",
                "type": "CustomTool",
                "baseClasses": ["CustomTool", "Tool", "StructuredTool", "Runnable"],
                "category": "Tools",
                "description": "Use custom tool you've created in Flowise within chatflow",
                "inputParams": [
                    {
                        "label": "Select Tool",
                        "name": "selectedTool",
                        "type": "asyncOptions",
                        "loadMethod": "listTools",
                        "id": "customTool_1-input-selectedTool-asyncOptions"
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "selectedTool": "29e51b55-6d5a-4f4f-9376-a864a62004cb"
                },
                "outputAnchors": [
                    {
                        "id": "customTool_1-output-customTool-CustomTool|Tool|StructuredTool|Runnable",
                        "name": "customTool",
                        "label": "CustomTool",
                        "description": "Use custom tool you've created in Flowise within chatflow",
                        "type": "CustomTool | Tool | StructuredTool | Runnable"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "width": 300,
            "height": 285,
            "selected": false,
            "positionAbsolute": {
                "x": 486.94483167859744,
                "y": 752.4728141868017
            },
            "dragging": false
        },
        {
            "id": "seqEnd_1",
            "position": {
                "x": 1323.5769712334538,
                "y": 1018.4998667433936
            },
            "type": "customNode",
            "data": {
                "id": "seqEnd_1",
                "label": "End",
                "version": 1,
                "name": "seqEnd",
                "type": "END",
                "baseClasses": ["END"],
                "category": "Sequential Agents",
                "description": "End conversation",
                "inputParams": [],
                "inputAnchors": [
                    {
                        "label": "Agent/End",
                        "name": "agentOrEnd",
                        "type": "Agent | END",
                        "id": "seqEnd_1-input-agentOrEnd-Agent | END"
                    }
                ],
                "inputs": {
                    "agentOrEnd": "{{seqAgent_0.data.instance}}"
                },
                "outputAnchors": [],
                "outputs": {},
                "selected": false
            },
            "width": 300,
            "height": 143,
            "positionAbsolute": {
                "x": 1323.5769712334538,
                "y": 1018.4998667433936
            },
            "selected": false,
            "dragging": false
        },
        {
            "id": "stickyNote_0",
            "position": {
                "x": -871.7024340255153,
                "y": -136.55968443998378
            },
            "type": "stickyNote",
            "data": {
                "id": "stickyNote_0",
                "label": "Sticky Note",
                "version": 1,
                "name": "stickyNote",
                "type": "StickyNote",
                "baseClasses": ["StickyNote"],
                "category": "Utilities",
                "description": "Add a sticky note",
                "inputParams": [
                    {
                        "label": "",
                        "name": "note",
                        "type": "string",
                        "rows": 1,
                        "placeholder": "Type something here",
                        "optional": true,
                        "id": "stickyNote_0-input-note-string"
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "note": "The goal of this flow is to verify user information before proceeding to answer any question.\n\nWe can achieve this by:\n1. Create a new state (userInfo) to save user information\n2. Check if \"userInfo\" is null\n3. If null, route to Identity Agent\n4. If already set, meaning user has been verified, route to Concierge Agent"
                },
                "outputAnchors": [
                    {
                        "id": "stickyNote_0-output-stickyNote-StickyNote",
                        "name": "stickyNote",
                        "label": "StickyNote",
                        "description": "Add a sticky note",
                        "type": "StickyNote"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "width": 300,
            "height": 243,
            "selected": false,
            "positionAbsolute": {
                "x": -871.7024340255153,
                "y": -136.55968443998378
            },
            "dragging": false
        },
        {
            "id": "stickyNote_1",
            "position": {
                "x": -526.8995925922741,
                "y": 744.6278689525851
            },
            "type": "stickyNote",
            "data": {
                "id": "stickyNote_1",
                "label": "Sticky Note",
                "version": 1,
                "name": "stickyNote",
                "type": "StickyNote",
                "baseClasses": ["StickyNote"],
                "category": "Utilities",
                "description": "Add a sticky note",
                "inputParams": [
                    {
                        "label": "",
                        "name": "note",
                        "type": "string",
                        "rows": 1,
                        "placeholder": "Type something here",
                        "optional": true,
                        "id": "stickyNote_1-input-note-string"
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "note": "Create a new state - \"userInfo\""
                },
                "outputAnchors": [
                    {
                        "id": "stickyNote_1-output-stickyNote-StickyNote",
                        "name": "stickyNote",
                        "label": "StickyNote",
                        "description": "Add a sticky note",
                        "type": "StickyNote"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "width": 300,
            "height": 42,
            "selected": false,
            "positionAbsolute": {
                "x": -526.8995925922741,
                "y": 744.6278689525851
            },
            "dragging": false
        },
        {
            "id": "stickyNote_2",
            "position": {
                "x": 384.27784096646917,
                "y": 12.887367130716655
            },
            "type": "stickyNote",
            "data": {
                "id": "stickyNote_2",
                "label": "Sticky Note",
                "version": 1,
                "name": "stickyNote",
                "type": "StickyNote",
                "baseClasses": ["StickyNote"],
                "category": "Utilities",
                "description": "Add a sticky note",
                "inputParams": [
                    {
                        "label": "",
                        "name": "note",
                        "type": "string",
                        "rows": 1,
                        "placeholder": "Type something here",
                        "optional": true,
                        "id": "stickyNote_2-input-note-string"
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "note": "Check if \"userInfo\" is null\n\n- If null, route to \"Identity\"\n- If set, route to \"Concierge\""
                },
                "outputAnchors": [
                    {
                        "id": "stickyNote_2-output-stickyNote-StickyNote",
                        "name": "stickyNote",
                        "label": "StickyNote",
                        "description": "Add a sticky note",
                        "type": "StickyNote"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "width": 300,
            "height": 103,
            "selected": false,
            "positionAbsolute": {
                "x": 384.27784096646917,
                "y": 12.887367130716655
            },
            "dragging": false
        },
        {
            "id": "stickyNote_3",
            "position": {
                "x": 484.45085013244454,
                "y": 673.4300290066091
            },
            "type": "stickyNote",
            "data": {
                "id": "stickyNote_3",
                "label": "Sticky Note",
                "version": 1,
                "name": "stickyNote",
                "type": "StickyNote",
                "baseClasses": ["StickyNote"],
                "category": "Utilities",
                "description": "Add a sticky note",
                "inputParams": [
                    {
                        "label": "",
                        "name": "note",
                        "type": "string",
                        "rows": 1,
                        "placeholder": "Type something here",
                        "optional": true,
                        "id": "stickyNote_3-input-note-string"
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "note": "This tool is used to check if there is a matching record from database"
                },
                "outputAnchors": [
                    {
                        "id": "stickyNote_3-output-stickyNote-StickyNote",
                        "name": "stickyNote",
                        "label": "StickyNote",
                        "description": "Add a sticky note",
                        "type": "StickyNote"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "width": 300,
            "height": 62,
            "selected": false,
            "positionAbsolute": {
                "x": 484.45085013244454,
                "y": 673.4300290066091
            },
            "dragging": false
        },
        {
            "id": "stickyNote_4",
            "position": {
                "x": 1243.0024726456593,
                "y": 769.9603352745077
            },
            "type": "stickyNote",
            "data": {
                "id": "stickyNote_4",
                "label": "Sticky Note",
                "version": 1,
                "name": "stickyNote",
                "type": "StickyNote",
                "baseClasses": ["StickyNote"],
                "category": "Utilities",
                "description": "Add a sticky note",
                "inputParams": [
                    {
                        "label": "",
                        "name": "note",
                        "type": "string",
                        "rows": 1,
                        "placeholder": "Type something here",
                        "optional": true,
                        "id": "stickyNote_4-input-note-string"
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "note": "This agent is designed to ask for user details, in order to check if user exists in database.\n\nIn the \"Additional Parameters\" -> \"Update State\", if the tool successfully found a matching record, we update \"userInfo\" state.\n\nOtherwise, we return an empty object"
                },
                "outputAnchors": [
                    {
                        "id": "stickyNote_4-output-stickyNote-StickyNote",
                        "name": "stickyNote",
                        "label": "StickyNote",
                        "description": "Add a sticky note",
                        "type": "StickyNote"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "width": 300,
            "height": 223,
            "selected": false,
            "positionAbsolute": {
                "x": 1243.0024726456593,
                "y": 769.9603352745077
            },
            "dragging": false
        },
        {
            "id": "stickyNote_5",
            "position": {
                "x": 1246.405604013145,
                "y": -112.2988490839329
            },
            "type": "stickyNote",
            "data": {
                "id": "stickyNote_5",
                "label": "Sticky Note",
                "version": 1,
                "name": "stickyNote",
                "type": "StickyNote",
                "baseClasses": ["StickyNote"],
                "category": "Utilities",
                "description": "Add a sticky note",
                "inputParams": [
                    {
                        "label": "",
                        "name": "note",
                        "type": "string",
                        "rows": 1,
                        "placeholder": "Type something here",
                        "optional": true,
                        "id": "stickyNote_5-input-note-string"
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "note": "This agent is designed to answer user question using the tool"
                },
                "outputAnchors": [
                    {
                        "id": "stickyNote_5-output-stickyNote-StickyNote",
                        "name": "stickyNote",
                        "label": "StickyNote",
                        "description": "Add a sticky note",
                        "type": "StickyNote"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "width": 300,
            "height": 62,
            "selected": false,
            "positionAbsolute": {
                "x": 1246.405604013145,
                "y": -112.2988490839329
            },
            "dragging": false
        },
        {
            "id": "stickyNote_6",
            "position": {
                "x": 473.9737647365272,
                "y": -610.7918364561665
            },
            "type": "stickyNote",
            "data": {
                "id": "stickyNote_6",
                "label": "Sticky Note",
                "version": 1,
                "name": "stickyNote",
                "type": "StickyNote",
                "baseClasses": ["StickyNote"],
                "category": "Utilities",
                "description": "Add a sticky note",
                "inputParams": [
                    {
                        "label": "",
                        "name": "note",
                        "type": "string",
                        "rows": 1,
                        "placeholder": "Type something here",
                        "optional": true,
                        "id": "stickyNote_6-input-note-string"
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "note": "When this tool is being used, that means \"userInfo\" was successfully updated by Identity Agent.\n\nWe can then use the saved \"userInfo\" to find additional data.\n\nFor example, if \"userInfo\" is an object containing \"userID\", we can use it to lookup other info from another table"
                },
                "outputAnchors": [
                    {
                        "id": "stickyNote_6-output-stickyNote-StickyNote",
                        "name": "stickyNote",
                        "label": "StickyNote",
                        "description": "Add a sticky note",
                        "type": "StickyNote"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "width": 300,
            "height": 223,
            "selected": false,
            "positionAbsolute": {
                "x": 473.9737647365272,
                "y": -610.7918364561665
            },
            "dragging": false
        }
    ],
    "edges": [
        {
            "source": "chatOpenAI_0",
            "sourceHandle": "chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable",
            "target": "seqStart_0",
            "targetHandle": "seqStart_0-input-model-BaseChatModel",
            "type": "buttonedge",
            "id": "chatOpenAI_0-chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable-seqStart_0-seqStart_0-input-model-BaseChatModel"
        },
        {
            "source": "seqState_0",
            "sourceHandle": "seqState_0-output-seqState-State",
            "target": "seqStart_0",
            "targetHandle": "seqStart_0-input-state-State",
            "type": "buttonedge",
            "id": "seqState_0-seqState_0-output-seqState-State-seqStart_0-seqStart_0-input-state-State"
        },
        {
            "source": "agentMemory_0",
            "sourceHandle": "agentMemory_0-output-agentMemory-AgentMemory|BaseCheckpointSaver",
            "target": "seqStart_0",
            "targetHandle": "seqStart_0-input-agentMemory-BaseCheckpointSaver",
            "type": "buttonedge",
            "id": "agentMemory_0-agentMemory_0-output-agentMemory-AgentMemory|BaseCheckpointSaver-seqStart_0-seqStart_0-input-agentMemory-BaseCheckpointSaver"
        },
        {
            "source": "seqStart_0",
            "sourceHandle": "seqStart_0-output-seqStart-START",
            "target": "seqCondition_0",
            "targetHandle": "seqCondition_0-input-agentOrStart-Agent | START",
            "type": "buttonedge",
            "id": "seqStart_0-seqStart_0-output-seqStart-START-seqCondition_0-seqCondition_0-input-agentOrStart-Agent | START"
        },
        {
            "source": "seqCondition_0",
            "sourceHandle": "seqCondition_0-output-identity-Agent",
            "target": "seqAgent_0",
            "targetHandle": "seqAgent_0-input-agentOrStart-Agent | START",
            "type": "buttonedge",
            "id": "seqCondition_0-seqCondition_0-output-identity-Agent-seqAgent_0-seqAgent_0-input-agentOrStart-Agent | START"
        },
        {
            "source": "seqCondition_0",
            "sourceHandle": "seqCondition_0-output-concierge-Agent",
            "target": "seqAgent_1",
            "targetHandle": "seqAgent_1-input-agentOrStart-Agent | START",
            "type": "buttonedge",
            "id": "seqCondition_0-seqCondition_0-output-concierge-Agent-seqAgent_1-seqAgent_1-input-agentOrStart-Agent | START"
        },
        {
            "source": "customTool_0",
            "sourceHandle": "customTool_0-output-customTool-CustomTool|Tool|StructuredTool|Runnable",
            "target": "seqAgent_1",
            "targetHandle": "seqAgent_1-input-tools-Tool",
            "type": "buttonedge",
            "id": "customTool_0-customTool_0-output-customTool-CustomTool|Tool|StructuredTool|Runnable-seqAgent_1-seqAgent_1-input-tools-Tool"
        },
        {
            "source": "customTool_1",
            "sourceHandle": "customTool_1-output-customTool-CustomTool|Tool|StructuredTool|Runnable",
            "target": "seqAgent_0",
            "targetHandle": "seqAgent_0-input-tools-Tool",
            "type": "buttonedge",
            "id": "customTool_1-customTool_1-output-customTool-CustomTool|Tool|StructuredTool|Runnable-seqAgent_0-seqAgent_0-input-tools-Tool"
        },
        {
            "source": "seqAgent_1",
            "sourceHandle": "seqAgent_1-output-seqAgent-Agent",
            "target": "seqEnd_0",
            "targetHandle": "seqEnd_0-input-agentOrEnd-Agent | END",
            "type": "buttonedge",
            "id": "seqAgent_1-seqAgent_1-output-seqAgent-Agent-seqEnd_0-seqEnd_0-input-agentOrEnd-Agent | END"
        },
        {
            "source": "seqAgent_0",
            "sourceHandle": "seqAgent_0-output-seqAgent-Agent",
            "target": "seqEnd_1",
            "targetHandle": "seqEnd_1-input-agentOrEnd-Agent | END",
            "type": "buttonedge",
            "id": "seqAgent_0-seqAgent_0-output-seqAgent-Agent-seqEnd_1-seqEnd_1-input-agentOrEnd-Agent | END"
        }
    ]
}
